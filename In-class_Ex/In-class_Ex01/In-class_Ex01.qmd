---
title: "In-class_Ex01"
author: "Hin Phung"
editor: visual
---

# Getting Started

### Using p_load() of pacman package to load tidyverse

The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer, If they are, then they will be launched into R.

```{r}
pacman::p_load(tidyverse)
```

### Importing the data

```{r}
exam_data <- read_csv("data/Exam_data.csv")

```

### Working with Theme

The code chunk below is to plot a horizontal bar chart - Changing the colors of plot panel background of theme_minimal() to light blue and the color of grid lines to white.

```{r}
ggplot(data=exam_data, aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal() +
  theme(panel.background = element_rect(fill = "lightblue", colour = "lightblue", size = 0.5, linetype = "solid"),
    panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = "white"), 
    panel.grid.minor = element_line(size = 0.25, linetype = 'solid', colour = "white"))
```

# Designing Data-driven Graphics for Analysis I

This code chunk is to improve the following: - y-aixs label is not clear (i.e. count) - To support effective comparison, the bars should be sorted by their resepctive frequencies. - For static graph, frequency values should be added to provide addition information.

```{r}
ggplot(data=exam_data, 
       aes(x=reorder(RACE,RACE,
                     function(x)-length(x)))) +
  geom_bar() +
  ylim(0,220) +
  geom_text(stat="count", 
      aes(label=paste0(..count.., ", ", 
      round(..count../sum(..count..)*100, 1), "%")),
      vjust=-1) +
  xlab("Race") +
  ylab("No. of\nPupils") +
  theme(axis.title.y=element_text(angle = 0))
```

This code chunk uses fct_infreq() of forcats package.

```{r}
exam_data %>%
  mutate(RACE = fct_infreq(RACE)) %>%
  ggplot(aes(x = RACE)) + 
  geom_bar()+
  ylim(0,220) +
  geom_text(stat="count", 
      aes(label=paste0(..count.., ", ", 
      round(..count../sum(..count..)*100,
            1), "%")),
      vjust=-1) +
  xlab("Race") +
  ylab("No. of\nPupils") +
  theme(axis.title.y=element_text(angle = 0))
```

# Designing Data-driven Graphics for Analysis II

The code chunk below does the following improvements: - Adding mean and median lines on the histogram plot. - Change fill color and line colour.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  geom_vline(aes(xintercept=mean(MATHS, na.rm=T)),
             color="red", 
             linetype="dashed", 
             size=1) +
  geom_vline(aes(xintercept=median(MATHS, na.rm=T)),
             color="grey30",
             linetype="dashed", 
             size=1)
```

# Designing Data-driven Graphics for Analysis III

The code chunk below shows the background having the distribution of English scores for all pupils.

```{r}
d <- exam_data   
d_bg <- d[, -3]  

ggplot(d, aes(x = ENGLISH, fill = GENDER)) +
  geom_histogram(data = d_bg, fill = "grey", alpha = .5) +
  geom_histogram(colour = "black") +
  facet_wrap(~ GENDER) +
  guides(fill = FALSE) +  
  theme_bw()

```

# Designing Data-driven Graphics for Analysis IV

The code chunk below shows the scatterplot of English vs math scores for all students.

```{r}
ggplot(data=exam_data, 
       aes(x=MATHS, y=ENGLISH)) +
  geom_point() +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  geom_hline(yintercept=50,
             linetype="dashed",
             color="grey60",
             size=1) + 
  geom_vline(xintercept=50, 
             linetype="dashed",
             color="grey60",
             size=1)
```
